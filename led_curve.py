#/usr/bin/python
'''
Generates a LED brightness lookup curve based on user inputs
'''
import argparse
import numpy as np

LED_CURVE_FILE_CC = 'led_curve.cc'
LED_CURVE_FILE_H = 'led_curve.h'

num_hex_digits = {8: 2, 16: 4, 32: 8}
type_name = {8: 'uint8_t', 16: 'uint16_t', 32: 'uint32_t'}


def generate_curve(curve_type='spline', size=256, max_val=255, type_size=8, print_table=False):
    x = np.array(np.arange(1, size + 1))
    x = x.astype(float)
    brightness = np.array(np.arange(1, size + 1))

    if (1 << type_size) < max_val:
        print 'Max value cannot fit in specified type size'
        exit(-1)

    if curve_type == 'quadratic':
        brightness = (((x - 1)**2) * (float(max_val) / size**2)).astype(int)
    elif curve_type == 'spline':
        brightness = (max_val / (1 + np.exp(((x / 21) - 6) * -1))).astype(int)
    else:
        print 'Invalid curve type'
        exit(-1)

    line = '/****************AUTOGENERATED by {}****************/\n\n'.format(__file__)
    line += '#include "led_curve.h"\n\n'
    line += 'namespace led_driver {\n\n'
    line += '// {} LED curve\n\n'.format(curve_type)
    line += 'const {} ledBrightnessCurve[kLedResolutionMax] =\n'.format(type_name[type_size])
    line += '{\n  '
    for i in range(0, len(brightness)):
        if i % 8 == 0 and i != 0:
            line += '\n  '

        if i == size - 1:
            line += '0x{:0{}x}, '.format(max_val, num_hex_digits[type_size])
        else:
            line += '0x{:0{}x}, '.format(brightness[i], num_hex_digits[type_size])

    line += '\n};'
    line += '\n\n}  // namespace led_driver'

    if print_table:
        print line

    with open(LED_CURVE_FILE_CC, 'w') as f:
        f.write(line)
        f.close()

    line = '/****************AUTOGENERATED by {}****************/\n\n'.format(__file__)
    line += '#pragma once\n\n'
    line += 'constexpr kLedResolutionMax = {};\n\n'.format(size)
    line += 'extern const {} ledBrightnessCurve[kLedResolutionMax];\n'.format(type_name[type_size])
    with open(LED_CURVE_FILE_H, 'w') as f:
        f.write(line)
        f.close()

    if print_table:
        print line

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Creates a lookup table for various LED curves')
    parser.add_argument(
        '-c',
        '--curve',
        type=str,
        default='spline',
        choices=[
            'spline',
            'quadratic'],
        help='Curve type')
    parser.add_argument('-s', '--size', type=int, default=256, help='Size of lookup table')
    parser.add_argument(
        '-m',
        '--max_brightness',
        type=int,
        default=255,
        help='Max led brightness value')
    parser.add_argument(
        '-t',
        '--type_size',
        type=int,
        default=8,
        choices=[
            8,
            16,
            32],
        help='Type of the table 8 => uint8_t, etc.')
    parser.add_argument('-p', '--print_table', action='store_true', help='Print out the table')
    args = parser.parse_args()
    generate_curve(args.curve, args.size, args.max_brightness, args.type_size, args.print_table)
